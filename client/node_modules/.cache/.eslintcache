[{"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\index.js":"1","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\App.jsx":"2","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\context\\AuthProvider.jsx":"3","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\index.js":"4","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\index.js":"5","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\index.js":"6","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\notify.js":"7","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\PrivateRoutes.jsx":"8","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\RegisterPage\\RegisterPage.jsx":"9","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\LoginPage\\LoginPage.jsx":"10","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\ForgotPasswordPage\\ForgotPasswordPage.jsx":"11","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\PasswordResetPage\\PasswordResetPage.jsx":"12","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\ProfileModal\\ProfileModal.jsx":"13","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\NavigationBar\\NavigationBar.jsx":"14","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\assets\\index.js":"15","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\MainPage\\Main.jsx":"16","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\HomePage\\HomePage.jsx":"17"},{"size":489,"mtime":1690277045089,"results":"18","hashOfConfig":"19"},{"size":1470,"mtime":1690623514952,"results":"20","hashOfConfig":"19"},{"size":761,"mtime":1690277045623,"results":"21","hashOfConfig":"19"},{"size":106,"mtime":1690277046289,"results":"22","hashOfConfig":"19"},{"size":421,"mtime":1690295943840,"results":"23","hashOfConfig":"19"},{"size":145,"mtime":1690277045370,"results":"24","hashOfConfig":"19"},{"size":955,"mtime":1690277046337,"results":"25","hashOfConfig":"19"},{"size":501,"mtime":1690277046238,"results":"26","hashOfConfig":"19"},{"size":6285,"mtime":1690806715636,"results":"27","hashOfConfig":"19"},{"size":13197,"mtime":1690630826811,"results":"28","hashOfConfig":"19"},{"size":2873,"mtime":1690439234927,"results":"29","hashOfConfig":"19"},{"size":4281,"mtime":1690439256213,"results":"30","hashOfConfig":"19"},{"size":2291,"mtime":1690807324037,"results":"31","hashOfConfig":"19"},{"size":2718,"mtime":1690772593334,"results":"32","hashOfConfig":"19"},{"size":296,"mtime":1690277045232,"results":"33","hashOfConfig":"19"},{"size":8425,"mtime":1690778741997,"results":"34","hashOfConfig":"19"},{"size":1188,"mtime":1690202669626,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1w6lfu7",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\index.js",[],[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\App.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\context\\AuthProvider.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\index.js",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\index.js",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\index.js",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\notify.js",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\utils\\PrivateRoutes.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\RegisterPage\\RegisterPage.jsx",["89"],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\LoginPage\\LoginPage.jsx",["90"],[],"// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { Form, Button, Spinner } from \"react-bootstrap\";\n// import { FaUserAlt } from \"react-icons/fa\";\n\n// import { AuthState } from \"../../context/AuthProvider\";\n// import { Notify } from \"../../utils\";\n\n// const LoginPage = () => {\n//   const [credentials, setCredentials] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const navigate = useNavigate();\n//   const { setAuth } = AuthState();\n\n//   const handleCredentials = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   const loginHandler = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     // If any field is missing\n//     if (!credentials.email || !credentials.password) {\n//       setIsLoading(false);\n//       return Notify(\"Please Fill all the Feilds\", \"warn\");\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/auth/login\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           email: credentials.email,\n//           password: credentials.password,\n//         }),\n//       });\n//       const data = await response.json();\n\n//       if (data.success) {\n//         localStorage.setItem(\"auth\", JSON.stringify(data)); // Save auth details in local storage\n//         setAuth(data);\n//         setIsLoading(false);\n//         navigate(\"/\"); // Go to home page\n//         return Notify(\"You are successfully logged in\", \"success\");\n//       } else {\n//         setIsLoading(false);\n//         return Notify(data.error, \"warn\");\n//       }\n//     } catch (error) {\n//       setIsLoading(false);\n//       return Notify(\"Internal server error\", \"error\");\n//     }\n//   };\n\n//   return (\n//     <Form className=\"auth__form\" onSubmit={loginHandler}>\n//       <h3 className=\"text-center mb-5\">Login to Your Account</h3>\n//       <Form.Group className=\"mb-3\" controlId=\"email\">\n//         <Form.Label>Email address</Form.Label>\n//         <Form.Control\n//           type=\"email\"\n//           name=\"email\"\n//           tabIndex=\"1\"\n//           placeholder=\"Enter email\"\n//           value={credentials.email}\n//           onChange={(e) => handleCredentials(e)}\n//         />\n//       </Form.Group>\n\n//       <Form.Group controlId=\"password\">\n//         <Form.Label>Password</Form.Label>\n//         <Form.Control\n//           type=\"password\"\n//           name=\"password\"\n//           tabIndex=\"2\"\n//           placeholder=\"Password\"\n//           value={credentials.password}\n//           onChange={(e) => handleCredentials(e)}\n//         />\n//       </Form.Group>\n\n//       <Form.Group className=\"mb-3 mt-1 text-center\" controlId=\"register\">\n//         <Link\n//           to=\"/forgotPassword\"\n//           tabIndex=\"4\"\n//           className=\"d-flex flex-row-reverse text-decoration-none mb-3\"\n//         >\n//           Forgot password?\n//         </Link>\n//       </Form.Group>\n\n//       <Button\n//         variant=\"success\"\n//         type=\"submit\"\n//         tabIndex=\"3\"\n//         className=\"mb-3\"\n//         disabled={isLoading}\n//       >\n//         {isLoading ? (\n//           <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n//         ) : (\n//           \"Continue\"\n//         )}\n//       </Button>\n\n//       <Button\n//         variant=\"danger\"\n//         type=\"button\"\n//         tabIndex=\"4\"\n//         className=\"mb-3\"\n//         onClick={() =>\n//           setCredentials({ email: \"guest@example.com\", password: \"12345678\" })\n//         }\n//       >\n//         <FaUserAlt className=\"me-2\" />\n//         Get Guest User Credentials\n//       </Button>\n\n//       <Form.Group className=\"mb-3 text-center\" controlId=\"register\">\n//         <span>\n//           Don't have an account?&nbsp;\n//           <Link to=\"/register\" tabIndex=\"5\" className=\"text-decoration-none\">\n//             Register now\n//           </Link>\n//         </span>\n//       </Form.Group>\n//     </Form>\n//   );\n// };\n\n// export default LoginPage;\n// import React, { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { Form, Button, Spinner } from \"react-bootstrap\";\n// import { FaUserAlt } from \"react-icons/fa\";\n\n// import { AuthState } from \"../../context/AuthProvider\";\n// import { Notify } from \"../../utils\";\n\n// const LoginPage = () => {\n//   const [credentials, setCredentials] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const navigate = useNavigate();\n//   const { setAuth } = AuthState();\n\n//   const handleCredentials = (e) => {\n//     setCredentials({ ...credentials, [e.target.name]: e.target.value });\n//   };\n\n//   const loginHandler = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     // If any field is missing\n//     if (!credentials.email || !credentials.password) {\n//       setIsLoading(false);\n//       return Notify(\"Please Fill all the Feilds\", \"warn\");\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:5000/api/auth/login\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           email: credentials.email,\n//           password: credentials.password,\n//         }),\n//       });\n//       const data = await response.json();\n\n//       if (data.success) {\n//         localStorage.setItem(\"auth\", JSON.stringify(data)); // Save auth details in local storage\n//         setAuth(data);\n//         setIsLoading(false);\n//         navigate(\"/main\"); // Go to main page\n//         return Notify(\"You are successfully logged in\", \"success\");\n//       } else {\n//         setIsLoading(false);\n//         return Notify(data.error, \"warn\");\n//       }\n//     } catch (error) {\n//       setIsLoading(false);\n//       return Notify(\"Internal server error\", \"error\");\n//     }\n//   };\n\n//   return (\n//     <Form className=\"auth__form\" onSubmit={loginHandler}>\n//       <h3 className=\"text-center mb-5\">Login to Your Account</h3>\n//       <Form.Group className=\"mb-3\" controlId=\"email\">\n//         <Form.Label>Email address</Form.Label>\n//         <Form.Control\n//           type=\"email\"\n//           name=\"email\"\n//           tabIndex=\"1\"\n//           placeholder=\"Enter email\"\n//           value={credentials.email}\n//           onChange={(e) => handleCredentials(e)}\n//         />\n//       </Form.Group>\n\n//       <Form.Group controlId=\"password\">\n//         <Form.Label>Password</Form.Label>\n//         <Form.Control\n//           type=\"password\"\n//           name=\"password\"\n//           tabIndex=\"2\"\n//           placeholder=\"Password\"\n//           value={credentials.password}\n//           onChange={(e) => handleCredentials(e)}\n//         />\n//       </Form.Group>\n\n//       <Form.Group className=\"mb-3 mt-1 text-center\" controlId=\"register\">\n//         <Link\n//           to=\"/forgotPassword\"\n//           tabIndex=\"4\"\n//           className=\"d-flex flex-row-reverse text-decoration-none mb-3\"\n//         >\n//           Forgot password?\n//         </Link>\n//       </Form.Group>\n\n//       <Button\n//         variant=\"success\"\n//         type=\"submit\"\n//         tabIndex=\"3\"\n//         className=\"mb-3\"\n//         disabled={isLoading}\n//       >\n//         {isLoading ? (\n//           <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n//         ) : (\n//           \"Continue\"\n//         )}\n//       </Button>\n\n//       <Button\n//         variant=\"danger\"\n//         type=\"button\"\n//         tabIndex=\"4\"\n//         className=\"mb-3\"\n//         onClick={() =>\n//           setCredentials({ email: \"guest@example.com\", password: \"12345678\" })\n//         }\n//       >\n//         <FaUserAlt className=\"me-2\" />\n//         Get Guest User Credentials\n//       </Button>\n\n//       <Form.Group className=\"mb-3 text-center\" controlId=\"register\">\n//         <span>\n//           Don't have an account?&nbsp;\n//           <Link to=\"/register\" tabIndex=\"5\" className=\"text-decoration-none\">\n//             Register now\n//           </Link>\n//         </span>\n//       </Form.Group>\n//     </Form>\n//   );\n// };\n\n// export default LoginPage;\n\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Form, Button, Spinner, Alert } from \"react-bootstrap\";\nimport { FaUserAlt } from \"react-icons/fa\";\n\nimport { AuthState } from \"../../context/AuthProvider\";\nimport { Notify } from \"../../utils\";\n\nconst LoginPage = () => {\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState(null); // New state to handle login errors\n  const [loginSuccess, setLoginSuccess] = useState(false); // New state to handle login success\n\n  const navigate = useNavigate();\n  const { setAuth } = AuthState();\n\n  const handleCredentials = (e) => {\n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\n    setLoginError(null); // Clear any previous login errors when the user types\n    setLoginSuccess(false); // Clear any previous login success messages when the user types\n  };\n\n  const loginHandler = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // If any field is missing\n    if (!credentials.email || !credentials.password) {\n      setIsLoading(false);\n      setLoginError(\"Please Fill all the Fields\"); // Set the login error message\n      return;\n    }\n\n    try {\n      const response = await fetch(\"https://internal-chat-gpt-updated.vercel.app/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: credentials.email,\n          password: credentials.password,\n        }),\n      });\n      const data = await response.json();\n\n      if (data.success) {\n        localStorage.setItem(\"auth\", JSON.stringify(data)); // Save auth details in local storage\n        setAuth(data);\n        setIsLoading(false);\n        setLoginSuccess(true); // Set the login success state to true\n        setTimeout(() => {\n          setLoginSuccess(false); // Clear the login success state after showing the message\n          navigate(\"/main\"); // Navigate to the main page\n        }, 3000); // Show the success message for 3 seconds (adjust as needed)\n      } else {\n        setIsLoading(false);\n        setLoginError(data.error); // Set the login error message\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setLoginError(\"Internal server error\");\n    }\n  };\n\n  return (\n    <Form className=\"auth__form\" onSubmit={loginHandler}>\n      <h3 className=\"text-center mb-5\">Login to Your Account</h3>\n      {loginError && ( // Display the error message if loginError is not null\n        <Alert variant=\"danger\" className=\"mb-3\">\n          {loginError}\n        </Alert>\n      )}\n\n      {loginSuccess && ( // Display the success message if loginSuccess is true\n        <Alert variant=\"success\" className=\"mb-3\">\n          Login successfully\n        </Alert>\n      )}\n\n      <Form.Group className=\"mb-3\" controlId=\"email\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control\n          type=\"email\"\n          name=\"email\"\n          tabIndex=\"1\"\n          placeholder=\"Enter email\"\n          value={credentials.email}\n          onChange={(e) => handleCredentials(e)}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"password\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control\n          type=\"password\"\n          name=\"password\"\n          tabIndex=\"2\"\n          placeholder=\"Password\"\n          value={credentials.password}\n          onChange={(e) => handleCredentials(e)}\n        />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3 mt-1 text-center\" controlId=\"register\">\n        <Link\n          to=\"/forgotPassword\"\n          tabIndex=\"4\"\n          className=\"d-flex flex-row-reverse text-decoration-none mb-3\"\n        >\n          Forgot password?\n        </Link>\n      </Form.Group>\n\n      <Button\n        variant=\"success\"\n        type=\"submit\"\n        tabIndex=\"3\"\n        className=\"mb-3\"\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n        ) : (\n          \"Continue\"\n        )}\n      </Button>\n\n      <Button\n        variant=\"danger\"\n        type=\"button\"\n        tabIndex=\"4\"\n        className=\"mb-3\"\n        onClick={() =>\n          setCredentials({ email: \"guest@example.com\", password: \"12345678\" })\n        }\n      >\n        <FaUserAlt className=\"me-2\" />\n        Get Guest User Credentials\n      </Button>\n\n      <Form.Group className=\"mb-3 text-center\" controlId=\"register\">\n        <span>\n          Don't have an account?&nbsp;\n          <Link to=\"/register\" tabIndex=\"5\" className=\"text-decoration-none\">\n            Register now\n          </Link>\n        </span>\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default LoginPage;\n","C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\ForgotPasswordPage\\ForgotPasswordPage.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\PasswordResetPage\\PasswordResetPage.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\ProfileModal\\ProfileModal.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\components\\NavigationBar\\NavigationBar.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\assets\\index.js",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\MainPage\\Main.jsx",[],[],"C:\\Users\\jithu\\OneDrive\\Desktop\\mern-stack-authentication-boilerplate-main\\client\\src\\pages\\HomePage\\HomePage.jsx",[],["91"],{"ruleId":"92","severity":1,"message":"93","line":22,"column":11,"nodeType":"94","messageId":"95","endLine":22,"endColumn":18},{"ruleId":"92","severity":1,"message":"96","line":284,"column":10,"nodeType":"94","messageId":"95","endLine":284,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":41,"column":6,"nodeType":"99","endLine":41,"endColumn":8,"suggestions":"100","suppressions":"101"},"no-unused-vars","'setAuth' is assigned a value but never used.","Identifier","unusedVar","'Notify' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPrivateDate'. Either include it or remove the dependency array.","ArrayExpression",["102"],["103"],{"desc":"104","fix":"105"},{"kind":"106","justification":"107"},"Update the dependencies array to be: [fetchPrivateDate]",{"range":"108","text":"109"},"directive","",[1113,1115],"[fetchPrivateDate]"]